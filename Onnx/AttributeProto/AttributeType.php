<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: onnx.proto3

namespace Onnx\AttributeProto;

use UnexpectedValueException;

/**
 * Note: this enum is structurally identical to the OpSchema::AttrType
 * enum defined in schema.h.  If you rev one, you likely need to rev the other.
 *
 * Protobuf type <code>onnx.AttributeProto.AttributeType</code>
 */
class AttributeType
{
    /**
     * Generated from protobuf enum <code>UNDEFINED = 0;</code>
     */
    const UNDEFINED = 0;
    /**
     * Generated from protobuf enum <code>FLOAT = 1;</code>
     */
    const FLOAT = 1;
    /**
     * Generated from protobuf enum <code>INT = 2;</code>
     */
    const INT = 2;
    /**
     * Generated from protobuf enum <code>STRING = 3;</code>
     */
    const STRING = 3;
    /**
     * Generated from protobuf enum <code>TENSOR = 4;</code>
     */
    const TENSOR = 4;
    /**
     * Generated from protobuf enum <code>GRAPH = 5;</code>
     */
    const GRAPH = 5;
    /**
     * Generated from protobuf enum <code>SPARSE_TENSOR = 11;</code>
     */
    const SPARSE_TENSOR = 11;
    /**
     * Generated from protobuf enum <code>TYPE_PROTO = 13;</code>
     */
    const TYPE_PROTO = 13;
    /**
     * Generated from protobuf enum <code>FLOATS = 6;</code>
     */
    const FLOATS = 6;
    /**
     * Generated from protobuf enum <code>INTS = 7;</code>
     */
    const INTS = 7;
    /**
     * Generated from protobuf enum <code>STRINGS = 8;</code>
     */
    const STRINGS = 8;
    /**
     * Generated from protobuf enum <code>TENSORS = 9;</code>
     */
    const TENSORS = 9;
    /**
     * Generated from protobuf enum <code>GRAPHS = 10;</code>
     */
    const GRAPHS = 10;
    /**
     * Generated from protobuf enum <code>SPARSE_TENSORS = 12;</code>
     */
    const SPARSE_TENSORS = 12;
    /**
     * Generated from protobuf enum <code>TYPE_PROTOS = 14;</code>
     */
    const TYPE_PROTOS = 14;

    private static $valueToName = [
        self::UNDEFINED => 'UNDEFINED',
        self::FLOAT => 'FLOAT',
        self::INT => 'INT',
        self::STRING => 'STRING',
        self::TENSOR => 'TENSOR',
        self::GRAPH => 'GRAPH',
        self::SPARSE_TENSOR => 'SPARSE_TENSOR',
        self::TYPE_PROTO => 'TYPE_PROTO',
        self::FLOATS => 'FLOATS',
        self::INTS => 'INTS',
        self::STRINGS => 'STRINGS',
        self::TENSORS => 'TENSORS',
        self::GRAPHS => 'GRAPHS',
        self::SPARSE_TENSORS => 'SPARSE_TENSORS',
        self::TYPE_PROTOS => 'TYPE_PROTOS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(AttributeType::class, \Onnx\AttributeProto_AttributeType::class);

