<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: onnx.proto3

namespace Onnx\TensorShapeProto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>onnx.TensorShapeProto.Dimension</code>
 */
class Dimension extends \Google\Protobuf\Internal\Message
{
    /**
     * Standard denotation can optionally be used to denote tensor
     * dimensions with standard semantic descriptions to ensure
     * that operations are applied to the correct axis of a tensor.
     * Refer to https://github.com/onnx/onnx/blob/main/docs/DimensionDenotation.md#denotation-definition
     * for pre-defined dimension denotations.
     *
     * Generated from protobuf field <code>string denotation = 3;</code>
     */
    protected $denotation = '';
    protected $value;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $dim_value
     *     @type string $dim_param
     *           namespace Shape
     *     @type string $denotation
     *           Standard denotation can optionally be used to denote tensor
     *           dimensions with standard semantic descriptions to ensure
     *           that operations are applied to the correct axis of a tensor.
     *           Refer to https://github.com/onnx/onnx/blob/main/docs/DimensionDenotation.md#denotation-definition
     *           for pre-defined dimension denotations.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Onnx::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 dim_value = 1;</code>
     * @return int|string
     */
    public function getDimValue()
    {
        return $this->readOneof(1);
    }

    public function hasDimValue()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>int64 dim_value = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDimValue($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * namespace Shape
     *
     * Generated from protobuf field <code>string dim_param = 2;</code>
     * @return string
     */
    public function getDimParam()
    {
        return $this->readOneof(2);
    }

    public function hasDimParam()
    {
        return $this->hasOneof(2);
    }

    /**
     * namespace Shape
     *
     * Generated from protobuf field <code>string dim_param = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDimParam($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Standard denotation can optionally be used to denote tensor
     * dimensions with standard semantic descriptions to ensure
     * that operations are applied to the correct axis of a tensor.
     * Refer to https://github.com/onnx/onnx/blob/main/docs/DimensionDenotation.md#denotation-definition
     * for pre-defined dimension denotations.
     *
     * Generated from protobuf field <code>string denotation = 3;</code>
     * @return string
     */
    public function getDenotation()
    {
        return $this->denotation;
    }

    /**
     * Standard denotation can optionally be used to denote tensor
     * dimensions with standard semantic descriptions to ensure
     * that operations are applied to the correct axis of a tensor.
     * Refer to https://github.com/onnx/onnx/blob/main/docs/DimensionDenotation.md#denotation-definition
     * for pre-defined dimension denotations.
     *
     * Generated from protobuf field <code>string denotation = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDenotation($var)
    {
        GPBUtil::checkString($var, True);
        $this->denotation = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getValue()
    {
        return $this->whichOneof("value");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Dimension::class, \Onnx\TensorShapeProto_Dimension::class);

