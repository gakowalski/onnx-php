<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: onnx.proto3

namespace Onnx;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Attributes
 * A named attribute containing either singular float, integer, string, graph,
 * and tensor values, or repeated float, integer, string, graph, and tensor values.
 * An AttributeProto MUST contain the name field, and *only one* of the
 * following content fields, effectively enforcing a C/C++ union equivalent.
 *
 * Generated from protobuf message <code>onnx.AttributeProto</code>
 */
class AttributeProto extends \Google\Protobuf\Internal\Message
{
    /**
     * The name field MUST be present for this version of the IR.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * if ref_attr_name is not empty, ref_attr_name is the attribute name in parent function.
     * In this case, this AttributeProto does not contain data, and it's a reference of attribute
     * in parent scope.
     * NOTE: This should ONLY be used in function (sub-graph). It's invalid to be used in main graph.
     *
     * Generated from protobuf field <code>string ref_attr_name = 21;</code>
     */
    protected $ref_attr_name = '';
    /**
     * A human-readable documentation for this attribute. Markdown is allowed.
     *
     * Generated from protobuf field <code>string doc_string = 13;</code>
     */
    protected $doc_string = '';
    /**
     * The type field MUST be present for this version of the IR.
     * For 0.0.1 versions of the IR, this field was not defined, and
     * implementations needed to use has_field heuristics to determine
     * which value field was in use.  For IR_VERSION 0.0.2 or later, this
     * field MUST be set and match the f|i|s|t|... field in use.  This
     * change was made to accommodate proto3 implementations.
     *
     * Generated from protobuf field <code>.onnx.AttributeProto.AttributeType type = 20;</code>
     */
    protected $type = 0;
    /**
     * Exactly ONE of the following fields must be present for this version of the IR
     *
     * Generated from protobuf field <code>float f = 2;</code>
     */
    protected $f = 0.0;
    /**
     * int
     *
     * Generated from protobuf field <code>int64 i = 3;</code>
     */
    protected $i = 0;
    /**
     * UTF-8 string
     *
     * Generated from protobuf field <code>bytes s = 4;</code>
     */
    protected $s = '';
    /**
     * tensor value
     *
     * Generated from protobuf field <code>.onnx.TensorProto t = 5;</code>
     */
    protected $t = null;
    /**
     * graph
     *
     * Generated from protobuf field <code>.onnx.GraphProto g = 6;</code>
     */
    protected $g = null;
    /**
     * sparse tensor value
     *
     * Generated from protobuf field <code>.onnx.SparseTensorProto sparse_tensor = 22;</code>
     */
    protected $sparse_tensor = null;
    /**
     * Do not use field below, it's deprecated.
     * optional ValueProto v = 12;         // value - subsumes everything but graph
     *
     * Generated from protobuf field <code>.onnx.TypeProto tp = 14;</code>
     */
    protected $tp = null;
    /**
     * list of floats
     *
     * Generated from protobuf field <code>repeated float floats = 7;</code>
     */
    private $floats;
    /**
     * list of ints
     *
     * Generated from protobuf field <code>repeated int64 ints = 8;</code>
     */
    private $ints;
    /**
     * list of UTF-8 strings
     *
     * Generated from protobuf field <code>repeated bytes strings = 9;</code>
     */
    private $strings;
    /**
     * list of tensors
     *
     * Generated from protobuf field <code>repeated .onnx.TensorProto tensors = 10;</code>
     */
    private $tensors;
    /**
     * list of graph
     *
     * Generated from protobuf field <code>repeated .onnx.GraphProto graphs = 11;</code>
     */
    private $graphs;
    /**
     * list of sparse tensors
     *
     * Generated from protobuf field <code>repeated .onnx.SparseTensorProto sparse_tensors = 23;</code>
     */
    private $sparse_tensors;
    /**
     * list of type protos
     *
     * Generated from protobuf field <code>repeated .onnx.TypeProto type_protos = 15;</code>
     */
    private $type_protos;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           The name field MUST be present for this version of the IR.
     *     @type string $ref_attr_name
     *           if ref_attr_name is not empty, ref_attr_name is the attribute name in parent function.
     *           In this case, this AttributeProto does not contain data, and it's a reference of attribute
     *           in parent scope.
     *           NOTE: This should ONLY be used in function (sub-graph). It's invalid to be used in main graph.
     *     @type string $doc_string
     *           A human-readable documentation for this attribute. Markdown is allowed.
     *     @type int $type
     *           The type field MUST be present for this version of the IR.
     *           For 0.0.1 versions of the IR, this field was not defined, and
     *           implementations needed to use has_field heuristics to determine
     *           which value field was in use.  For IR_VERSION 0.0.2 or later, this
     *           field MUST be set and match the f|i|s|t|... field in use.  This
     *           change was made to accommodate proto3 implementations.
     *     @type float $f
     *           Exactly ONE of the following fields must be present for this version of the IR
     *     @type int|string $i
     *           int
     *     @type string $s
     *           UTF-8 string
     *     @type \Onnx\TensorProto $t
     *           tensor value
     *     @type \Onnx\GraphProto $g
     *           graph
     *     @type \Onnx\SparseTensorProto $sparse_tensor
     *           sparse tensor value
     *     @type \Onnx\TypeProto $tp
     *           Do not use field below, it's deprecated.
     *           optional ValueProto v = 12;         // value - subsumes everything but graph
     *     @type array<float>|\Google\Protobuf\Internal\RepeatedField $floats
     *           list of floats
     *     @type array<int>|array<string>|\Google\Protobuf\Internal\RepeatedField $ints
     *           list of ints
     *     @type array<string>|\Google\Protobuf\Internal\RepeatedField $strings
     *           list of UTF-8 strings
     *     @type array<\Onnx\TensorProto>|\Google\Protobuf\Internal\RepeatedField $tensors
     *           list of tensors
     *     @type array<\Onnx\GraphProto>|\Google\Protobuf\Internal\RepeatedField $graphs
     *           list of graph
     *     @type array<\Onnx\SparseTensorProto>|\Google\Protobuf\Internal\RepeatedField $sparse_tensors
     *           list of sparse tensors
     *     @type array<\Onnx\TypeProto>|\Google\Protobuf\Internal\RepeatedField $type_protos
     *           list of type protos
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Onnx::initOnce();
        parent::__construct($data);
    }

    /**
     * The name field MUST be present for this version of the IR.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The name field MUST be present for this version of the IR.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * if ref_attr_name is not empty, ref_attr_name is the attribute name in parent function.
     * In this case, this AttributeProto does not contain data, and it's a reference of attribute
     * in parent scope.
     * NOTE: This should ONLY be used in function (sub-graph). It's invalid to be used in main graph.
     *
     * Generated from protobuf field <code>string ref_attr_name = 21;</code>
     * @return string
     */
    public function getRefAttrName()
    {
        return $this->ref_attr_name;
    }

    /**
     * if ref_attr_name is not empty, ref_attr_name is the attribute name in parent function.
     * In this case, this AttributeProto does not contain data, and it's a reference of attribute
     * in parent scope.
     * NOTE: This should ONLY be used in function (sub-graph). It's invalid to be used in main graph.
     *
     * Generated from protobuf field <code>string ref_attr_name = 21;</code>
     * @param string $var
     * @return $this
     */
    public function setRefAttrName($var)
    {
        GPBUtil::checkString($var, True);
        $this->ref_attr_name = $var;

        return $this;
    }

    /**
     * A human-readable documentation for this attribute. Markdown is allowed.
     *
     * Generated from protobuf field <code>string doc_string = 13;</code>
     * @return string
     */
    public function getDocString()
    {
        return $this->doc_string;
    }

    /**
     * A human-readable documentation for this attribute. Markdown is allowed.
     *
     * Generated from protobuf field <code>string doc_string = 13;</code>
     * @param string $var
     * @return $this
     */
    public function setDocString($var)
    {
        GPBUtil::checkString($var, True);
        $this->doc_string = $var;

        return $this;
    }

    /**
     * The type field MUST be present for this version of the IR.
     * For 0.0.1 versions of the IR, this field was not defined, and
     * implementations needed to use has_field heuristics to determine
     * which value field was in use.  For IR_VERSION 0.0.2 or later, this
     * field MUST be set and match the f|i|s|t|... field in use.  This
     * change was made to accommodate proto3 implementations.
     *
     * Generated from protobuf field <code>.onnx.AttributeProto.AttributeType type = 20;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type field MUST be present for this version of the IR.
     * For 0.0.1 versions of the IR, this field was not defined, and
     * implementations needed to use has_field heuristics to determine
     * which value field was in use.  For IR_VERSION 0.0.2 or later, this
     * field MUST be set and match the f|i|s|t|... field in use.  This
     * change was made to accommodate proto3 implementations.
     *
     * Generated from protobuf field <code>.onnx.AttributeProto.AttributeType type = 20;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Onnx\AttributeProto\AttributeType::class);
        $this->type = $var;

        return $this;
    }

    /**
     * Exactly ONE of the following fields must be present for this version of the IR
     *
     * Generated from protobuf field <code>float f = 2;</code>
     * @return float
     */
    public function getF()
    {
        return $this->f;
    }

    /**
     * Exactly ONE of the following fields must be present for this version of the IR
     *
     * Generated from protobuf field <code>float f = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setF($var)
    {
        GPBUtil::checkFloat($var);
        $this->f = $var;

        return $this;
    }

    /**
     * int
     *
     * Generated from protobuf field <code>int64 i = 3;</code>
     * @return int|string
     */
    public function getI()
    {
        return $this->i;
    }

    /**
     * int
     *
     * Generated from protobuf field <code>int64 i = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setI($var)
    {
        GPBUtil::checkInt64($var);
        $this->i = $var;

        return $this;
    }

    /**
     * UTF-8 string
     *
     * Generated from protobuf field <code>bytes s = 4;</code>
     * @return string
     */
    public function getS()
    {
        return $this->s;
    }

    /**
     * UTF-8 string
     *
     * Generated from protobuf field <code>bytes s = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setS($var)
    {
        GPBUtil::checkString($var, False);
        $this->s = $var;

        return $this;
    }

    /**
     * tensor value
     *
     * Generated from protobuf field <code>.onnx.TensorProto t = 5;</code>
     * @return \Onnx\TensorProto|null
     */
    public function getT()
    {
        return $this->t;
    }

    public function hasT()
    {
        return isset($this->t);
    }

    public function clearT()
    {
        unset($this->t);
    }

    /**
     * tensor value
     *
     * Generated from protobuf field <code>.onnx.TensorProto t = 5;</code>
     * @param \Onnx\TensorProto $var
     * @return $this
     */
    public function setT($var)
    {
        GPBUtil::checkMessage($var, \Onnx\TensorProto::class);
        $this->t = $var;

        return $this;
    }

    /**
     * graph
     *
     * Generated from protobuf field <code>.onnx.GraphProto g = 6;</code>
     * @return \Onnx\GraphProto|null
     */
    public function getG()
    {
        return $this->g;
    }

    public function hasG()
    {
        return isset($this->g);
    }

    public function clearG()
    {
        unset($this->g);
    }

    /**
     * graph
     *
     * Generated from protobuf field <code>.onnx.GraphProto g = 6;</code>
     * @param \Onnx\GraphProto $var
     * @return $this
     */
    public function setG($var)
    {
        GPBUtil::checkMessage($var, \Onnx\GraphProto::class);
        $this->g = $var;

        return $this;
    }

    /**
     * sparse tensor value
     *
     * Generated from protobuf field <code>.onnx.SparseTensorProto sparse_tensor = 22;</code>
     * @return \Onnx\SparseTensorProto|null
     */
    public function getSparseTensor()
    {
        return $this->sparse_tensor;
    }

    public function hasSparseTensor()
    {
        return isset($this->sparse_tensor);
    }

    public function clearSparseTensor()
    {
        unset($this->sparse_tensor);
    }

    /**
     * sparse tensor value
     *
     * Generated from protobuf field <code>.onnx.SparseTensorProto sparse_tensor = 22;</code>
     * @param \Onnx\SparseTensorProto $var
     * @return $this
     */
    public function setSparseTensor($var)
    {
        GPBUtil::checkMessage($var, \Onnx\SparseTensorProto::class);
        $this->sparse_tensor = $var;

        return $this;
    }

    /**
     * Do not use field below, it's deprecated.
     * optional ValueProto v = 12;         // value - subsumes everything but graph
     *
     * Generated from protobuf field <code>.onnx.TypeProto tp = 14;</code>
     * @return \Onnx\TypeProto|null
     */
    public function getTp()
    {
        return $this->tp;
    }

    public function hasTp()
    {
        return isset($this->tp);
    }

    public function clearTp()
    {
        unset($this->tp);
    }

    /**
     * Do not use field below, it's deprecated.
     * optional ValueProto v = 12;         // value - subsumes everything but graph
     *
     * Generated from protobuf field <code>.onnx.TypeProto tp = 14;</code>
     * @param \Onnx\TypeProto $var
     * @return $this
     */
    public function setTp($var)
    {
        GPBUtil::checkMessage($var, \Onnx\TypeProto::class);
        $this->tp = $var;

        return $this;
    }

    /**
     * list of floats
     *
     * Generated from protobuf field <code>repeated float floats = 7;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFloats()
    {
        return $this->floats;
    }

    /**
     * list of floats
     *
     * Generated from protobuf field <code>repeated float floats = 7;</code>
     * @param array<float>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFloats($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::FLOAT);
        $this->floats = $arr;

        return $this;
    }

    /**
     * list of ints
     *
     * Generated from protobuf field <code>repeated int64 ints = 8;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInts()
    {
        return $this->ints;
    }

    /**
     * list of ints
     *
     * Generated from protobuf field <code>repeated int64 ints = 8;</code>
     * @param array<int>|array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInts($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->ints = $arr;

        return $this;
    }

    /**
     * list of UTF-8 strings
     *
     * Generated from protobuf field <code>repeated bytes strings = 9;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getStrings()
    {
        return $this->strings;
    }

    /**
     * list of UTF-8 strings
     *
     * Generated from protobuf field <code>repeated bytes strings = 9;</code>
     * @param array<string>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setStrings($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->strings = $arr;

        return $this;
    }

    /**
     * list of tensors
     *
     * Generated from protobuf field <code>repeated .onnx.TensorProto tensors = 10;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTensors()
    {
        return $this->tensors;
    }

    /**
     * list of tensors
     *
     * Generated from protobuf field <code>repeated .onnx.TensorProto tensors = 10;</code>
     * @param array<\Onnx\TensorProto>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTensors($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Onnx\TensorProto::class);
        $this->tensors = $arr;

        return $this;
    }

    /**
     * list of graph
     *
     * Generated from protobuf field <code>repeated .onnx.GraphProto graphs = 11;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getGraphs()
    {
        return $this->graphs;
    }

    /**
     * list of graph
     *
     * Generated from protobuf field <code>repeated .onnx.GraphProto graphs = 11;</code>
     * @param array<\Onnx\GraphProto>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setGraphs($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Onnx\GraphProto::class);
        $this->graphs = $arr;

        return $this;
    }

    /**
     * list of sparse tensors
     *
     * Generated from protobuf field <code>repeated .onnx.SparseTensorProto sparse_tensors = 23;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSparseTensors()
    {
        return $this->sparse_tensors;
    }

    /**
     * list of sparse tensors
     *
     * Generated from protobuf field <code>repeated .onnx.SparseTensorProto sparse_tensors = 23;</code>
     * @param array<\Onnx\SparseTensorProto>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSparseTensors($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Onnx\SparseTensorProto::class);
        $this->sparse_tensors = $arr;

        return $this;
    }

    /**
     * list of type protos
     *
     * Generated from protobuf field <code>repeated .onnx.TypeProto type_protos = 15;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTypeProtos()
    {
        return $this->type_protos;
    }

    /**
     * list of type protos
     *
     * Generated from protobuf field <code>repeated .onnx.TypeProto type_protos = 15;</code>
     * @param array<\Onnx\TypeProto>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTypeProtos($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Onnx\TypeProto::class);
        $this->type_protos = $arr;

        return $this;
    }

}

