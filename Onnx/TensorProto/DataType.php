<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: onnx.proto3

namespace Onnx\TensorProto;

use UnexpectedValueException;

/**
 * Protobuf type <code>onnx.TensorProto.DataType</code>
 */
class DataType
{
    /**
     * Generated from protobuf enum <code>UNDEFINED = 0;</code>
     */
    const UNDEFINED = 0;
    /**
     * Basic types.
     *
     * Generated from protobuf enum <code>FLOAT = 1;</code>
     */
    const FLOAT = 1;
    /**
     * uint8_t
     *
     * Generated from protobuf enum <code>UINT8 = 2;</code>
     */
    const UINT8 = 2;
    /**
     * int8_t
     *
     * Generated from protobuf enum <code>INT8 = 3;</code>
     */
    const INT8 = 3;
    /**
     * uint16_t
     *
     * Generated from protobuf enum <code>UINT16 = 4;</code>
     */
    const UINT16 = 4;
    /**
     * int16_t
     *
     * Generated from protobuf enum <code>INT16 = 5;</code>
     */
    const INT16 = 5;
    /**
     * int32_t
     *
     * Generated from protobuf enum <code>INT32 = 6;</code>
     */
    const INT32 = 6;
    /**
     * int64_t
     *
     * Generated from protobuf enum <code>INT64 = 7;</code>
     */
    const INT64 = 7;
    /**
     * string
     *
     * Generated from protobuf enum <code>STRING = 8;</code>
     */
    const STRING = 8;
    /**
     * bool
     *
     * Generated from protobuf enum <code>BOOL = 9;</code>
     */
    const BOOL = 9;
    /**
     * IEEE754 half-precision floating-point format (16 bits wide).
     * This format has 1 sign bit, 5 exponent bits, and 10 mantissa bits.
     *
     * Generated from protobuf enum <code>FLOAT16 = 10;</code>
     */
    const FLOAT16 = 10;
    /**
     * Generated from protobuf enum <code>DOUBLE = 11;</code>
     */
    const DOUBLE = 11;
    /**
     * Generated from protobuf enum <code>UINT32 = 12;</code>
     */
    const UINT32 = 12;
    /**
     * Generated from protobuf enum <code>UINT64 = 13;</code>
     */
    const UINT64 = 13;
    /**
     * complex with float32 real and imaginary components
     *
     * Generated from protobuf enum <code>COMPLEX64 = 14;</code>
     */
    const COMPLEX64 = 14;
    /**
     * complex with float64 real and imaginary components
     *
     * Generated from protobuf enum <code>COMPLEX128 = 15;</code>
     */
    const COMPLEX128 = 15;
    /**
     * Non-IEEE floating-point format based on IEEE754 single-precision
     * floating-point number truncated to 16 bits.
     * This format has 1 sign bit, 8 exponent bits, and 7 mantissa bits.
     *
     * Generated from protobuf enum <code>BFLOAT16 = 16;</code>
     */
    const BFLOAT16 = 16;

    private static $valueToName = [
        self::UNDEFINED => 'UNDEFINED',
        self::FLOAT => 'FLOAT',
        self::UINT8 => 'UINT8',
        self::INT8 => 'INT8',
        self::UINT16 => 'UINT16',
        self::INT16 => 'INT16',
        self::INT32 => 'INT32',
        self::INT64 => 'INT64',
        self::STRING => 'STRING',
        self::BOOL => 'BOOL',
        self::FLOAT16 => 'FLOAT16',
        self::DOUBLE => 'DOUBLE',
        self::UINT32 => 'UINT32',
        self::UINT64 => 'UINT64',
        self::COMPLEX64 => 'COMPLEX64',
        self::COMPLEX128 => 'COMPLEX128',
        self::BFLOAT16 => 'BFLOAT16',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DataType::class, \Onnx\TensorProto_DataType::class);

