<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: onnx.proto3

namespace Onnx\TensorProto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * For very large tensors, we may want to store them in chunks, in which
 * case the following fields will specify the segment that is stored in
 * the current TensorProto.
 *
 * Generated from protobuf message <code>onnx.TensorProto.Segment</code>
 */
class Segment extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int64 begin = 1;</code>
     */
    protected $begin = 0;
    /**
     * Generated from protobuf field <code>int64 end = 2;</code>
     */
    protected $end = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $begin
     *     @type int|string $end
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Onnx::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int64 begin = 1;</code>
     * @return int|string
     */
    public function getBegin()
    {
        return $this->begin;
    }

    /**
     * Generated from protobuf field <code>int64 begin = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBegin($var)
    {
        GPBUtil::checkInt64($var);
        $this->begin = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int64 end = 2;</code>
     * @return int|string
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * Generated from protobuf field <code>int64 end = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setEnd($var)
    {
        GPBUtil::checkInt64($var);
        $this->end = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Segment::class, \Onnx\TensorProto_Segment::class);

