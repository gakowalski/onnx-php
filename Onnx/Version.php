<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: onnx.proto3

namespace Onnx;

use UnexpectedValueException;

/**
 * Versioning
 * ONNX versioning is specified in docs/IR.md and elaborated on in docs/Versioning.md
 * To be compatible with both proto2 and proto3, we will use a version number
 * that is not defined by the default value but an explicit enum number.
 *
 * Protobuf type <code>onnx.Version</code>
 */
class Version
{
    /**
     * proto3 requires the first enum value to be zero.
     * We add this just to appease the compiler.
     *
     * Generated from protobuf enum <code>_START_VERSION = 0;</code>
     */
    const _START_VERSION = 0;
    /**
     * The version field is always serialized and we will use it to store the
     * version that the  graph is generated from. This helps us set up version
     * control.
     * For the IR, we are using simple numbers starting with 0x00000001,
     * which was the version we published on Oct 10, 2017.
     *
     * Generated from protobuf enum <code>IR_VERSION_2017_10_10 = 1;</code>
     */
    const IR_VERSION_2017_10_10 = 1;
    /**
     * IR_VERSION 2 published on Oct 30, 2017
     * - Added type discriminator to AttributeProto to support proto3 users
     *
     * Generated from protobuf enum <code>IR_VERSION_2017_10_30 = 2;</code>
     */
    const IR_VERSION_2017_10_30 = 2;
    /**
     * IR VERSION 3 published on Nov 3, 2017
     * - For operator versioning:
     *    - Added new message OperatorSetIdProto
     *    - Added opset_import in ModelProto
     * - For vendor extensions, added domain in NodeProto
     *
     * Generated from protobuf enum <code>IR_VERSION_2017_11_3 = 3;</code>
     */
    const IR_VERSION_2017_11_3 = 3;
    /**
     * IR VERSION 4 published on Jan 22, 2019
     * - Relax constraint that initializers should be a subset of graph inputs
     * - Add type BFLOAT16
     *
     * Generated from protobuf enum <code>IR_VERSION_2019_1_22 = 4;</code>
     */
    const IR_VERSION_2019_1_22 = 4;
    /**
     * IR VERSION 5 published on March 18, 2019
     * - Add message TensorAnnotation.
     * - Add quantization annotation in GraphProto to map tensor with its scale and zero point quantization parameters.
     *
     * Generated from protobuf enum <code>IR_VERSION_2019_3_18 = 5;</code>
     */
    const IR_VERSION_2019_3_18 = 5;
    /**
     * IR VERSION 6 published on Sep 19, 2019
     * - Add support for sparse tensor constants stored in model.
     *   - Add message SparseTensorProto
     *   - Add sparse initializers
     *
     * Generated from protobuf enum <code>IR_VERSION_2019_9_19 = 6;</code>
     */
    const IR_VERSION_2019_9_19 = 6;
    /**
     * IR VERSION 7 published on May 8, 2020
     * - Add support to allow function body graph to rely on multiple external opreator sets.
     * - Add a list to promote inference graph's initializers to global and
     *   mutable variables. Global variables are visible in all graphs of the
     *   stored models.
     * - Add message TrainingInfoProto to store initialization
     *   method and training algorithm. The execution of TrainingInfoProto
     *   can modify the values of mutable variables.
     * - Implicitly add inference graph into each TrainingInfoProto's algorithm.
     *
     * Generated from protobuf enum <code>IR_VERSION_2020_5_8 = 7;</code>
     */
    const IR_VERSION_2020_5_8 = 7;
    /**
     * IR VERSION 8 published on <TBD>
     * Introduce TypeProto.SparseTensor
     * Introduce TypeProto.Optional
     * Added a list of FunctionProtos local to the model
     * Deprecated since_version and operator status from FunctionProto
     *
     * Generated from protobuf enum <code>IR_VERSION = 8;</code>
     */
    const IR_VERSION = 8;

    private static $valueToName = [
        self::_START_VERSION => '_START_VERSION',
        self::IR_VERSION_2017_10_10 => 'IR_VERSION_2017_10_10',
        self::IR_VERSION_2017_10_30 => 'IR_VERSION_2017_10_30',
        self::IR_VERSION_2017_11_3 => 'IR_VERSION_2017_11_3',
        self::IR_VERSION_2019_1_22 => 'IR_VERSION_2019_1_22',
        self::IR_VERSION_2019_3_18 => 'IR_VERSION_2019_3_18',
        self::IR_VERSION_2019_9_19 => 'IR_VERSION_2019_9_19',
        self::IR_VERSION_2020_5_8 => 'IR_VERSION_2020_5_8',
        self::IR_VERSION => 'IR_VERSION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

