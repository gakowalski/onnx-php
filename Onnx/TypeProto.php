<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: onnx.proto3

namespace Onnx;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Types
 * The standard ONNX data types.
 *
 * Generated from protobuf message <code>onnx.TypeProto</code>
 */
class TypeProto extends \Google\Protobuf\Internal\Message
{
    /**
     * An optional denotation can be used to denote the whole
     * type with a standard semantic description as to what is
     * stored inside. Refer to https://github.com/onnx/onnx/blob/main/docs/TypeDenotation.md#type-denotation-definition
     * for pre-defined type denotations.
     *
     * Generated from protobuf field <code>string denotation = 6;</code>
     */
    protected $denotation = '';
    protected $value;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Onnx\TypeProto\Tensor $tensor_type
     *           The type of a tensor.
     *     @type \Onnx\TypeProto\Sequence $sequence_type
     *           The type of a sequence.
     *     @type \Onnx\TypeProto\Map $map_type
     *           The type of a map.
     *     @type \Onnx\TypeProto\Optional $optional_type
     *           The type of an optional.
     *     @type \Onnx\TypeProto\SparseTensor $sparse_tensor_type
     *           Type of the sparse tensor
     *     @type string $denotation
     *           An optional denotation can be used to denote the whole
     *           type with a standard semantic description as to what is
     *           stored inside. Refer to https://github.com/onnx/onnx/blob/main/docs/TypeDenotation.md#type-denotation-definition
     *           for pre-defined type denotations.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Onnx::initOnce();
        parent::__construct($data);
    }

    /**
     * The type of a tensor.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Tensor tensor_type = 1;</code>
     * @return \Onnx\TypeProto\Tensor|null
     */
    public function getTensorType()
    {
        return $this->readOneof(1);
    }

    public function hasTensorType()
    {
        return $this->hasOneof(1);
    }

    /**
     * The type of a tensor.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Tensor tensor_type = 1;</code>
     * @param \Onnx\TypeProto\Tensor $var
     * @return $this
     */
    public function setTensorType($var)
    {
        GPBUtil::checkMessage($var, \Onnx\TypeProto\Tensor::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * The type of a sequence.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Sequence sequence_type = 4;</code>
     * @return \Onnx\TypeProto\Sequence|null
     */
    public function getSequenceType()
    {
        return $this->readOneof(4);
    }

    public function hasSequenceType()
    {
        return $this->hasOneof(4);
    }

    /**
     * The type of a sequence.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Sequence sequence_type = 4;</code>
     * @param \Onnx\TypeProto\Sequence $var
     * @return $this
     */
    public function setSequenceType($var)
    {
        GPBUtil::checkMessage($var, \Onnx\TypeProto\Sequence::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * The type of a map.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Map map_type = 5;</code>
     * @return \Onnx\TypeProto\Map|null
     */
    public function getMapType()
    {
        return $this->readOneof(5);
    }

    public function hasMapType()
    {
        return $this->hasOneof(5);
    }

    /**
     * The type of a map.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Map map_type = 5;</code>
     * @param \Onnx\TypeProto\Map $var
     * @return $this
     */
    public function setMapType($var)
    {
        GPBUtil::checkMessage($var, \Onnx\TypeProto\Map::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * The type of an optional.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Optional optional_type = 9;</code>
     * @return \Onnx\TypeProto\Optional|null
     */
    public function getOptionalType()
    {
        return $this->readOneof(9);
    }

    public function hasOptionalType()
    {
        return $this->hasOneof(9);
    }

    /**
     * The type of an optional.
     *
     * Generated from protobuf field <code>.onnx.TypeProto.Optional optional_type = 9;</code>
     * @param \Onnx\TypeProto\Optional $var
     * @return $this
     */
    public function setOptionalType($var)
    {
        GPBUtil::checkMessage($var, \Onnx\TypeProto\Optional::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Type of the sparse tensor
     *
     * Generated from protobuf field <code>.onnx.TypeProto.SparseTensor sparse_tensor_type = 8;</code>
     * @return \Onnx\TypeProto\SparseTensor|null
     */
    public function getSparseTensorType()
    {
        return $this->readOneof(8);
    }

    public function hasSparseTensorType()
    {
        return $this->hasOneof(8);
    }

    /**
     * Type of the sparse tensor
     *
     * Generated from protobuf field <code>.onnx.TypeProto.SparseTensor sparse_tensor_type = 8;</code>
     * @param \Onnx\TypeProto\SparseTensor $var
     * @return $this
     */
    public function setSparseTensorType($var)
    {
        GPBUtil::checkMessage($var, \Onnx\TypeProto\SparseTensor::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * An optional denotation can be used to denote the whole
     * type with a standard semantic description as to what is
     * stored inside. Refer to https://github.com/onnx/onnx/blob/main/docs/TypeDenotation.md#type-denotation-definition
     * for pre-defined type denotations.
     *
     * Generated from protobuf field <code>string denotation = 6;</code>
     * @return string
     */
    public function getDenotation()
    {
        return $this->denotation;
    }

    /**
     * An optional denotation can be used to denote the whole
     * type with a standard semantic description as to what is
     * stored inside. Refer to https://github.com/onnx/onnx/blob/main/docs/TypeDenotation.md#type-denotation-definition
     * for pre-defined type denotations.
     *
     * Generated from protobuf field <code>string denotation = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setDenotation($var)
    {
        GPBUtil::checkString($var, True);
        $this->denotation = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getValue()
    {
        return $this->whichOneof("value");
    }

}

